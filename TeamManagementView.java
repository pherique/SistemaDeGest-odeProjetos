package com.project_management_system.view;

import com.project_management_system.controller.TeamController;
import com.project_management_system.controller.UserController;
import com.project_management_system.model.Team;
import com.project_management_system.model.User;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.SQLException;
import java.util.List;

public class TeamManagementView extends JFrame {
    private User loggedInUser;
    private TeamController teamController;
    private UserController userController;
    private JTable teamTable;
    private DefaultTableModel tableModel;

    private JTextField teamNameField;
    private JTextArea descriptionArea;
    private JButton addButton;
    private JButton updateButton;
    private JButton deleteButton;
    private JButton manageMembersButton;

    public TeamManagementView(User user) {
        this.loggedInUser = user;
        teamController = new TeamController();
        userController = new UserController();

        setTitle("Gestão de Equipes");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        setLayout(new BorderLayout());

        // Team Form Panel
        JPanel formPanel = new JPanel(new GridLayout(2, 2, 10, 10));
        formPanel.setBorder(BorderFactory.createTitledBorder("Detalhes da Equipe"));

        teamNameField = new JTextField();
        descriptionArea = new JTextArea(3, 20);
        descriptionArea.setLineWrap(true);
        descriptionArea.setWrapStyleWord(true);
        JScrollPane descriptionScrollPane = new JScrollPane(descriptionArea);

        formPanel.add(new JLabel("Nome da Equipe:"));
        formPanel.add(teamNameField);
        formPanel.add(new JLabel("Descrição:"));
        formPanel.add(descriptionScrollPane);

        // Buttons Panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        addButton = new JButton("Adicionar");
        updateButton = new JButton("Atualizar");
        deleteButton = new JButton("Excluir");
        manageMembersButton = new JButton("Gerenciar Membros");

        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(manageMembersButton);

        // Table Panel
        String[] columnNames = {"ID", "Nome da Equipe", "Descrição"};
        tableModel = new DefaultTableModel(columnNames, 0);
        teamTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(teamTable);

        add(formPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        loadTeams();
        addListeners();
        applyAccessControl();
    }

    private void loadTeams() {
        tableModel.setRowCount(0); // Clear existing data
        try {
            List<Team> teams = teamController.getAllTeams();
            for (Team team : teams) {
                tableModel.addRow(new Object[]{
                        team.getTeamId(),
                        team.getTeamName(),
                        team.getDescription()
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar equipes: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void addListeners() {
        addButton.addActionListener(e -> {
            try {
                Team newTeam = new Team(
                        0, // ID will be generated by DB
                        teamNameField.getText(),
                        descriptionArea.getText()
                );
                teamController.createTeam(newTeam);
                JOptionPane.showMessageDialog(this, "Equipe adicionada com sucesso!");
                clearForm();
                loadTeams();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao adicionar equipe: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        });

        updateButton.addActionListener(e -> {
            int selectedRow = teamTable.getSelectedRow();
            if (selectedRow >= 0) {
                try {
                    int teamId = (int) tableModel.getValueAt(selectedRow, 0);
                    Team updatedTeam = new Team(
                            teamId,
                            teamNameField.getText(),
                            descriptionArea.getText()
                    );
                    teamController.updateTeam(updatedTeam);
                    JOptionPane.showMessageDialog(this, "Equipe atualizada com sucesso!");
                    clearForm();
                    loadTeams();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao atualizar equipe: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione uma equipe para atualizar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        });

        deleteButton.addActionListener(e -> {
            int selectedRow = teamTable.getSelectedRow();
            if (selectedRow >= 0) {
                int teamId = (int) tableModel.getValueAt(selectedRow, 0);
                int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir esta equipe?", "Confirmar Exclusão", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    try {
                        teamController.deleteTeam(teamId);
                        JOptionPane.showMessageDialog(this, "Equipe excluída com sucesso!");
                        clearForm();
                        loadTeams();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Erro ao excluir equipe: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        ex.printStackTrace();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione uma equipe para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        });

        manageMembersButton.addActionListener(e -> {
            int selectedRow = teamTable.getSelectedRow();
            if (selectedRow >= 0) {
                int teamId = (int) tableModel.getValueAt(selectedRow, 0);
                String teamName = (String) tableModel.getValueAt(selectedRow, 1);
                new TeamMembersManagementDialog(this, teamId, teamName, loggedInUser).setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Selecione uma equipe para gerenciar os membros.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        });

        teamTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && teamTable.getSelectedRow() != -1) {
                int selectedRow = teamTable.getSelectedRow();
                teamNameField.setText((String) tableModel.getValueAt(selectedRow, 1));
                descriptionArea.setText((String) tableModel.getValueAt(selectedRow, 2));
            }
        });
    }

    private void clearForm() {
        teamNameField.setText("");
        descriptionArea.setText("");
        teamTable.clearSelection();
    }

    private void applyAccessControl() {
        if (loggedInUser.getRole().equals("colaborador")) {
            addButton.setEnabled(false);
            updateButton.setEnabled(false);
            deleteButton.setEnabled(false);
            manageMembersButton.setEnabled(false);
            teamNameField.setEditable(false);
            descriptionArea.setEditable(false);
        }
    }

    // Inner class for managing team members
    private class TeamMembersManagementDialog extends JDialog {
        private int teamId;
        private User loggedInUser;
        private TeamController teamController;
        private UserController userController;
        private JList<User> currentMembersList;
        private DefaultListModel<User> currentMembersListModel;
        private JList<User> availableUsersList;
        private DefaultListModel<User> availableUsersListModel;

        public TeamMembersManagementDialog(JFrame parent, int teamId, String teamName, User user) {
            super(parent, "Gerenciar Membros da Equipe: " + teamName, true);
            this.teamId = teamId;
            this.loggedInUser = user;
            teamController = new TeamController();
            userController = new UserController();

            setSize(600, 400);
            setLocationRelativeTo(parent);
            setLayout(new BorderLayout());

            JPanel mainPanel = new JPanel(new GridLayout(1, 2, 10, 10));
            mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

            // Current Members Panel
            JPanel currentMembersPanel = new JPanel(new BorderLayout());
            currentMembersPanel.setBorder(BorderFactory.createTitledBorder("Membros Atuais"));
            currentMembersListModel = new DefaultListModel<>();
            currentMembersList = new JList<>(currentMembersListModel);
            currentMembersList.setCellRenderer(new UserListCellRenderer());
            currentMembersPanel.add(new JScrollPane(currentMembersList), BorderLayout.CENTER);
            JButton removeMemberButton = new JButton("Remover Membro");
            removeMemberButton.addActionListener(e -> removeSelectedMember());
            currentMembersPanel.add(removeMemberButton, BorderLayout.SOUTH);
            mainPanel.add(currentMembersPanel);

            // Available Users Panel
            JPanel availableUsersPanel = new JPanel(new BorderLayout());
            availableUsersPanel.setBorder(BorderFactory.createTitledBorder("Usuários Disponíveis"));
            availableUsersListModel = new DefaultListModel<>();
            availableUsersList = new JList<>(availableUsersListModel);
            availableUsersList.setCellRenderer(new UserListCellRenderer());
            availableUsersPanel.add(new JScrollPane(availableUsersList), BorderLayout.CENTER);
            JButton addMemberButton = new JButton("Adicionar Membro");
            addMemberButton.addActionListener(e -> addSelectedMember());
            availableUsersPanel.add(addMemberButton, BorderLayout.SOUTH);
            mainPanel.add(availableUsersPanel);

            add(mainPanel, BorderLayout.CENTER);

            loadMembers();
            applyMemberAccessControl();
        }

        private void loadMembers() {
            currentMembersListModel.clear();
            availableUsersListModel.clear();
            try {
                List<User> allUsers = userController.getAllUsers();
                List<User> currentMembers = teamController.getTeamMembers(teamId);

                for (User user : allUsers) {
                    if (currentMembers.stream().noneMatch(member -> member.getUserId() == user.getUserId())) {
                        availableUsersListModel.addElement(user);
                    }
                }
                for (User member : currentMembers) {
                    currentMembersListModel.addElement(member);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao carregar membros: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }

        private void addSelectedMember() {
            User selectedUser = availableUsersList.getSelectedValue();
            if (selectedUser != null) {
                try {
                    teamController.addMemberToTeam(teamId, selectedUser.getUserId());
                    JOptionPane.showMessageDialog(this, selectedUser.getFullName() + " adicionado à equipe.");
                    loadMembers();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao adicionar membro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um usuário para adicionar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }

        private void removeSelectedMember() {
            User selectedMember = currentMembersList.getSelectedValue();
            if (selectedMember != null) {
                try {
                    teamController.removeMemberFromTeam(teamId, selectedMember.getUserId());
                    JOptionPane.showMessageDialog(this, selectedMember.getFullName() + " removido da equipe.");
                    loadMembers();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao remover membro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um membro para remover.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }

        private void applyMemberAccessControl() {
            if (loggedInUser.getRole().equals("colaborador")) {
                // Disable add/remove buttons for collaborators
                ((JButton)((JPanel)availableUsersList.getParent().getParent()).getComponent(2)).setEnabled(false); // Add button
                ((JButton)((JPanel)currentMembersList.getParent().getParent()).getComponent(2)).setEnabled(false); // Remove button
            }
        }

        // Custom Cell Renderer for User objects in JList
        private class UserListCellRenderer extends DefaultListCellRenderer {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof User) {
                    User user = (User) value;
                    setText(user.getFullName() + " (" + user.getUsername() + ")");
                }
                return this;
            }
        }
    }
}


