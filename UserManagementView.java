package com.project_management_system.view;

import com.project_management_system.controller.UserController;
import com.project_management_system.model.User;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.SQLException;
import java.util.List;

public class UserManagementView extends JFrame {
    private User loggedInUser;
    private UserController userController;
    private JTable userTable;
    private DefaultTableModel tableModel;

    private JTextField fullNameField;
    private JTextField cpfField;
    private JTextField emailField;
    private JComboBox<String> roleComboBox;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton addButton;
    private JButton updateButton;
    private JButton deleteButton;

    public UserManagementView(User user) {
        this.loggedInUser = user;
        userController = new UserController();

        setTitle("Gestão de Usuários");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        setLayout(new BorderLayout());

        // User Form Panel
        JPanel formPanel = new JPanel(new GridLayout(7, 2, 10, 10));
        formPanel.setBorder(BorderFactory.createTitledBorder("Detalhes do Usuário"));

        fullNameField = new JTextField();
        cpfField = new JTextField();
        emailField = new JTextField();
        roleComboBox = new JComboBox<>(new String[]{"administrador", "gerente", "colaborador"});
        usernameField = new JTextField();
        passwordField = new JPasswordField();

        formPanel.add(new JLabel("Nome Completo:"));
        formPanel.add(fullNameField);
        formPanel.add(new JLabel("CPF:"));
        formPanel.add(cpfField);
        formPanel.add(new JLabel("Email:"));
        formPanel.add(emailField);
        formPanel.add(new JLabel("Cargo:"));
        formPanel.add(roleComboBox);
        formPanel.add(new JLabel("Usuário:"));
        formPanel.add(usernameField);
        formPanel.add(new JLabel("Senha:"));
        formPanel.add(passwordField);

        // Buttons Panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        addButton = new JButton("Adicionar");
        updateButton = new JButton("Atualizar");
        deleteButton = new JButton("Excluir");

        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);

        // Table Panel
        String[] columnNames = {"ID", "Nome Completo", "CPF", "Email", "Cargo", "Usuário"};
        tableModel = new DefaultTableModel(columnNames, 0);
        userTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(userTable);

        add(formPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        loadUsers();
        addListeners();
        applyAccessControl();
    }

    private void loadUsers() {
        tableModel.setRowCount(0); // Clear existing data
        try {
            List<User> users = userController.getAllUsers();
            for (User user : users) {
                tableModel.addRow(new Object[]{
                        user.getUserId(),
                        user.getFullName(),
                        user.getCpf(),
                        user.getEmail(),
                        user.getRole(),
                        user.getUsername()
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar usuários: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void addListeners() {
        addButton.addActionListener(e -> {
            try {
                User newUser = new User(
                        0, // ID will be generated by DB
                        fullNameField.getText(),
                        cpfField.getText(),
                        emailField.getText(),
                        (String) roleComboBox.getSelectedItem(),
                        usernameField.getText(),
                        new String(passwordField.getPassword())
                );
                userController.createUser(newUser);
                JOptionPane.showMessageDialog(this, "Usuário adicionado com sucesso!");
                clearForm();
                loadUsers();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao adicionar usuário: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        });

        updateButton.addActionListener(e -> {
            int selectedRow = userTable.getSelectedRow();
            if (selectedRow >= 0) {
                try {
                    int userId = (int) tableModel.getValueAt(selectedRow, 0);
                    User updatedUser = new User(
                            userId,
                            fullNameField.getText(),
                            cpfField.getText(),
                            emailField.getText(),
                            (String) roleComboBox.getSelectedItem(),
                            usernameField.getText(),
                            new String(passwordField.getPassword())
                    );
                    userController.updateUser(updatedUser);
                    JOptionPane.showMessageDialog(this, "Usuário atualizado com sucesso!");
                    clearForm();
                    loadUsers();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao atualizar usuário: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um usuário para atualizar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        });

        deleteButton.addActionListener(e -> {
            int selectedRow = userTable.getSelectedRow();
            if (selectedRow >= 0) {
                int userId = (int) tableModel.getValueAt(selectedRow, 0);
                int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir este usuário?", "Confirmar Exclusão", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    try {
                        userController.deleteUser(userId);
                        JOptionPane.showMessageDialog(this, "Usuário excluído com sucesso!");
                        clearForm();
                        loadUsers();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Erro ao excluir usuário: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        ex.printStackTrace();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um usuário para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        });

        userTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && userTable.getSelectedRow() != -1) {
                int selectedRow = userTable.getSelectedRow();
                fullNameField.setText((String) tableModel.getValueAt(selectedRow, 1));
                cpfField.setText((String) tableModel.getValueAt(selectedRow, 2));
                emailField.setText((String) tableModel.getValueAt(selectedRow, 3));
                roleComboBox.setSelectedItem((String) tableModel.getValueAt(selectedRow, 4));
                usernameField.setText((String) tableModel.getValueAt(selectedRow, 5));
                passwordField.setText(""); // Clear password field for security
            }
        });
    }

    private void clearForm() {
        fullNameField.setText("");
        cpfField.setText("");
        emailField.setText("");
        roleComboBox.setSelectedIndex(0);
        usernameField.setText("");
        passwordField.setText("");
        userTable.clearSelection();
    }

    private void applyAccessControl() {
        if (!loggedInUser.getRole().equals("administrador")) {
            addButton.setEnabled(false);
            updateButton.setEnabled(false);
            deleteButton.setEnabled(false);
            fullNameField.setEditable(false);
            cpfField.setEditable(false);
            emailField.setEditable(false);
            roleComboBox.setEnabled(false);
            usernameField.setEditable(false);
            passwordField.setEditable(false);
        }
    }
}


